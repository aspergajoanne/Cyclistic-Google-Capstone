#load libraries 
library(tidyverse) #calculations
library(lubridate) #dates 
library(hms) #time
library(data.table) #exporting data frame
library(readxl) #to read xlsx files
library(skimr)
install.packages("janitor")
install.packages("skimr")
install.packages("dplyr")
install.packages ("knitr")

#=====================
# STEP 1: COLLECT DATA
#=====================
#load original .xlsx files, a years worth of data from February 2022 to February 2023

feb2022_df <- read_excel("Case Study for R/202202.xlsx")
mar2022_df <- read_excel("Case Study for R/202203.xlsx")
apr2022_df <- read_excel("Case Study for R/202204.xlsx")
may2022_df <- read_excel("Case Study for R/202205.xlsx")
jun2022_df <- read_excel("Case Study for R/202206.xlsx")
jul2022_df <- read_excel("Case Study for R/202207.xlsx")
aug2022_df <- read_excel("Case Study for R/202208.xlsx")
sep2022_df <- read_excel("Case Study for R/202209.xlsx")
oct2022_df <- read_excel("Case Study for R/202210.xlsx")
nov2022_df <- read_excel("Case Study for R/202211.xlsx")
dec2022_df <- read_excel("Case Study for R/202212.xlsx")
jan2023_df <- read_excel("Case Study for R/202301.xlsx")
feb2023_df <- read_excel("Case Study for R/202302.xlsx")

#====================================================
# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================

#merge all of the data frames into one year view
cyclistic_df <- rbind(feb2022_df, mar2022_df, apr2022_df, may2022_df, jun2022_df, jul2022_df, aug2022_df, sep2022_df, oct2022_df, nov2022_df, dec2022_df, jan2023_df, feb2023_df)

#create new data frame to contain new columns
cyclistic_full <- cyclistic_df

#remove the other dataframes
rm(feb2022_df)
rm(mar2022_df)
rm(apr2022_df)
rm(may2022_df)
rm(jun2022_df)
rm(jul2022_df)
rm(aug2022_df)
rm(sep2022_df)
rm(oct2022_df)
rm(nov2022_df)
rm(dec2022_df)
rm(jan2023_df)
rm(feb2023_df)


#calculate ride length by subtracting ended_at time from started_at time and converted it to minutes
cyclistic_full$ride_length <- difftime(cyclistic_df$ended_at, cyclistic_df$started_at, units = "mins")
View(cyclistic_full)

#Rename the variable details of cyclistic_full for better representation during analysis
cyclistic_full <- cyclistic_full %>% 
  rename( customers=member_casual)

#======================================================
# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
#======================================================


# Inspect the new table that has been created

	colnames(cyclistic_full)  
[1] "rideable_type" "started_at"    "ended_at"      "ride_length"  
[5] "day_of_week"   "customers"  

	nrow(cyclistic_full)
[1] 5939410

	dim(cyclistic_full)  
[1] 5939410       6

	head(cyclistic_full)  
# A tibble: 6 × 6
  rideable_type started_at          ended_at            ride_length
  <chr>         <dttm>              <dttm>              <drtn>     
1 classic_bike  2022-02-19 18:08:00 2022-02-19 18:23:00 15 mins    
2 classic_bike  2022-02-20 17:41:00 2022-02-20 17:45:00  4 mins    
3 classic_bike  2022-02-25 18:55:00 2022-02-25 19:09:00 14 mins    
4 classic_bike  2022-02-14 11:57:00 2022-02-14 12:04:00  7 mins    
5 classic_bike  2022-02-16 05:36:00 2022-02-16 05:39:00  3 mins    
6 classic_bike  2022-02-07 09:51:00 2022-02-07 10:07:00 16 mins    
# ℹ 2 more variables: day_of_week <dbl>, customers <chr>

	tail(cyclistic_full)
# A tibble: 6 × 6
  rideable_type started_at          ended_at            ride_length
  <chr>         <dttm>              <dttm>              <drtn>     
1 electric_bike 2023-02-04 17:52:00 2023-02-04 17:59:00  7 mins    
2 classic_bike  2023-02-08 21:57:00 2023-02-08 22:08:00 11 mins    
3 electric_bike 2023-02-19 11:29:00 2023-02-19 11:39:00 10 mins    
4 electric_bike 2023-02-07 09:01:00 2023-02-07 09:16:00 15 mins    
5 electric_bike 2023-02-22 08:33:00 2023-02-22 08:50:00 17 mins    
6 classic_bike  2023-02-01 21:52:00 2023-02-01 22:04:00 12 mins    
# ℹ 2 more variables: day_of_week <dbl>, customers <chr>

	str(cyclistic_full)
tibble [5,939,410 × 6] (S3: tbl_df/tbl/data.frame)
 $ rideable_type: chr [1:5939410] "classic_bike" "classic_bike" "classic_bike" "classic_bike" ...
 $ started_at   : POSIXct[1:5939410], format: "2022-02-19 18:08:00" ...
 $ ended_at     : POSIXct[1:5939410], format: "2022-02-19 18:23:00" ...
 $ ride_length  : 'difftime' num [1:5939410] 15 4 14 7 ...
  ..- attr(*, "units")= chr "mins"
 $ day_of_week  : num [1:5939410] 7 1 6 2 4 2 2 3 6 1 ...
 $ customers    : chr [1:5939410] "member" "member" "member" "member" ...

	summary(cyclistic_full)
 rideable_type        started_at                   
 Length:5939410     Min.   :2022-02-01 00:03:00.0  
 Class :character   1st Qu.:2022-06-04 11:49:15.0  
 Mode  :character   Median :2022-07-31 10:36:00.0  
                    Mean   :2022-08-05 02:55:02.2  
                    3rd Qu.:2022-09-29 19:33:00.0  
                    Max.   :2023-02-28 23:59:00.0  
    ended_at                      ride_length        day_of_week   
 Min.   :2022-02-01 00:09:00.00   Length:5939410    Min.   :1.000  
 1st Qu.:2022-06-04 12:11:00.00   Class :difftime   1st Qu.:2.000  
 Median :2022-07-31 10:57:00.00   Mode  :numeric    Median :4.000  
 Mean   :2022-08-05 03:14:10.60                     Mean   :4.084  
 3rd Qu.:2022-09-29 19:48:00.00                     3rd Qu.:6.000  
 Max.   :2023-03-06 15:09:00.00                     Max.   :7.000  
  customers        
 Length:5939410    
 Class :character  
 Mode  :character  

	glimpse(cyclistic_full)
Rows: 5,939,410
Columns: 6
$ rideable_type <chr> "classic_bike", "classic_bike", "classic_bike", …
$ started_at    <dttm> 2022-02-19 18:08:00, 2022-02-20 17:41:00, 2022-…
$ ended_at      <dttm> 2022-02-19 18:23:00, 2022-02-20 17:45:00, 2022-…
$ ride_length   <drtn> 15 mins, 4 mins, 14 mins, 7 mins, 3 mins, 16 mi…
$ day_of_week   <dbl> 7, 1, 6, 2, 4, 2, 2, 3, 6, 1, 2, 3, 7, 7, 2, 2, …
$ customers     <chr> "member", "member", "member", "member", "member"…

	skim_without_charts(cyclistic_full)
── Data Summary ────────────────────────
                           Values        
Name                       cyclistic_full
Number of rows             5939410       
Number of columns          6             
_______________________                  
Column type frequency:                   
  character                2             
  difftime                 1             
  numeric                  1             
  POSIXct                  2             
________________________                 
Group variables            None          

── Variable type: character ────────────────────────────────────────────
  skim_variable n_missing complete_rate min max empty n_unique
1 rideable_type         0             1  11  13     0        3
2 customers             0             1   6   6     0        2
  whitespace
1          0
2          0

── Variable type: difftime ─────────────────────────────────────────────
  skim_variable n_missing complete_rate min    max        median 
1 ride_length           0             1 0 mins 41387 mins 10 mins
  n_unique
1     2866

── Variable type: numeric ──────────────────────────────────────────────
  skim_variable n_missing complete_rate mean   sd p0 p25 p50 p75 p100
1 day_of_week           0             1 4.08 2.01  1   2   4   6    7

── Variable type: POSIXct ──────────────────────────────────────────────
  skim_variable n_missing complete_rate min                
1 started_at            0             1 2022-02-01 00:03:00
2 ended_at              0             1 2022-02-01 00:09:00
  max                 median              n_unique
1 2023-02-28 23:59:00 2022-07-31 10:36:00   493309
2 2023-03-06 15:09:00 2022-07-31 10:57:00   494134




# Add columns that list the date, month, day, and year of each ride
# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level
# https://www.statmethods.net/input/dates.html more on date formats in R found at that link
cyclistic_full$date <- as.Date(cyclistic_full$started_at) #The default format is yyyy-mm-dd
cyclistic_full$month <- format(as.Date(cyclistic_full$date), "%m") 
cyclistic_full$day <- format(as.Date(cyclistic_full$date), "%d")
cyclistic_full$day_of_week <- wday(cyclistic_full$started_at) #calculate the day of the week 
cyclistic_full$day_of_week <- format(as.Date(cyclistic_full$date), "%A") #create column for day of week
cyclistic_full$year <- format(as.Date(cyclistic_full$date), "%Y")
cyclistic_full$day_of_week <- format(as.Date(cyclistic_full$date), "%A")
cyclistic_full$hour <- (format(cyclistic_full$started_at,format="%H")) #create new column for hour
#create new column for time
cyclistic_full$date <- as.Date(cyclistic_full$started_at)
cyclistic_full$time <- format(cyclistic_full$started_at,"%H:%M:%S")


# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
cyclistic_full <- cyclistic_full[!(cyclistic_full$ride_length <=0),] #remove where ride_length is 0 or negative


#create column for different seasons: Spring, Summer, Fall, Winter
cyclistic_full <- cyclistic_full %>% mutate(season = 
                                             case_when(month == "03" ~ "Spring",
                                                       month == "04" ~ "Spring",
                                                       month == "05" ~ "Spring",
                                                       month == "06"  ~ "Summer",
                                                       month == "07"  ~ "Summer",
                                                       month == "08"  ~ "Summer",
                                                       month == "09" ~ "Fall",
                                                       month == "10" ~ "Fall",
                                                       month == "11" ~ "Fall",
                                                       month == "12" ~ "Winter",
                                                       month == "01" ~ "Winter",
                                                       month == "02" ~ "Winter")
)


#create column for different time_of_day: Night, Morning, Afternoon, Evening
cyclistic_full <-cyclistic_full %>% mutate(time_of_day = 
                                             case_when(hour == "00" ~ "Night",
                                                       hour == "01" ~ "Night",
                                                       hour == "02" ~ "Night",
                                                       hour == "03" ~ "Night",
                                                       hour == "04" ~ "Night",
                                                       hour == "05" ~ "Night",
                                                       hour == "06" ~ "Morning",
                                                       hour == "07" ~ "Morning",
                                                       hour == "08" ~ "Morning",
                                                       hour == "09" ~ "Morning",
                                                       hour == "10" ~ "Morning",
                                                       hour == "11" ~ "Morning",
                                                       hour == "12" ~ "Afternoon",
                                                       hour == "13" ~ "Afternoon",
                                                       hour == "14" ~ "Afternoon",
                                                       hour == "15" ~ "Afternoon",
                                                       hour == "16" ~ "Afternoon",
                                                       hour == "17" ~ "Afternoon",
                                                       hour == "18" ~ "Evening",
                                                       hour == "19" ~ "Evening",
                                                       hour == "20" ~ "Evening",
                                                       hour == "21" ~ "Evening",
                                                       hour == "22" ~ "Evening",
                                                       hour == "23" ~ "Evening")
)



#The newly added variables were checked using the following functions: summary(), str(), and colnames().

	summary(cyclistic_full)
 rideable_type        started_at                       ended_at                     
 Length:5939410     Min.   :2022-02-01 00:03:00.0   Min.   :2022-02-01 00:09:00.00  
 Class :character   1st Qu.:2022-06-04 11:49:15.0   1st Qu.:2022-06-04 12:11:00.00  
 Mode  :character   Median :2022-07-31 10:36:00.0   Median :2022-07-31 10:57:00.00  
                    Mean   :2022-08-05 02:55:02.2   Mean   :2022-08-05 03:14:10.60  
                    3rd Qu.:2022-09-29 19:33:00.0   3rd Qu.:2022-09-29 19:48:00.00  
                    Max.   :2023-02-28 23:59:00.0   Max.   :2023-03-06 15:09:00.00  
 ride_length       day_of_week         customers              date           
 Length:5939410    Length:5939410     Length:5939410     Min.   :2022-02-01  
 Class :difftime   Class :character   Class :character   1st Qu.:2022-06-04  
 Mode  :numeric    Mode  :character   Mode  :character   Median :2022-07-31  
                                                         Mean   :2022-08-04  
                                                         3rd Qu.:2022-09-29  
                                                         Max.   :2023-02-28  
    month               day                year               hour          
 Length:5939410     Length:5939410     Length:5939410     Length:5939410    
 Class :character   Class :character   Class :character   Class :character  
 Mode  :character   Mode  :character   Mode  :character   Mode  :character  
                                                                            
                                                                            
                                                                            
     time              season          time_of_day       
 Length:5939410     Length:5939410     Length:5939410    
 Class :character   Class :character   Class :character  
 Mode  :character   Mode  :character   Mode  :character   
                                                         
                                                         
                                                         
	str(cyclistic_full)
tibble [5,939,410 × 14] (S3: tbl_df/tbl/data.frame)
 $ rideable_type: chr [1:5939410] "classic_bike" "classic_bike" "classic_bike" "classic_bike" ...
 $ started_at   : POSIXct[1:5939410], format: "2022-02-19 18:08:00" "2022-02-20 17:41:00" ...
 $ ended_at     : POSIXct[1:5939410], format: "2022-02-19 18:23:00" "2022-02-20 17:45:00" ...
 $ ride_length  : 'difftime' num [1:5939410] 15 4 14 7 ...
  ..- attr(*, "units")= chr "mins"
 $ day_of_week  : chr [1:5939410] "Saturday" "Sunday" "Friday" "Monday" ...
 $ customers    : chr [1:5939410] "member" "member" "member" "member" ...
 $ date         : Date[1:5939410], format: "2022-02-19" "2022-02-20" ...
 $ month        : chr [1:5939410] "02" "02" "02" "02" ...
 $ day          : chr [1:5939410] "19" "20" "25" "14" ...
 $ year         : chr [1:5939410] "2022" "2022" "2022" "2022" ...
 $ hour         : chr [1:5939410] "18" "17" "18" "11" ...
 $ time         : chr [1:5939410] "18:08:00" "17:41:00" "18:55:00" "11:57:00" ...
 $ season       : chr [1:5939410] "Winter" "Winter" "Winter" "Winter" ...
 $ time_of_day  : chr [1:5939410] "Evening" "Afternoon" "Evening" "Morning" ...

	colnames(cyclistic_full)
 [1] "rideable_type" "started_at"    "ended_at"      "ride_length"   "day_of_week"  
 [6] "customers"     "date"          "month"         "day"           "year"         
[11] "hour"          "time"          "season"        "time_of_day"  



#======================================================
# STEP 4: Analyze
#======================================================

#-----------------------------------------TOTAL RIDES--------------------------------------
#total number of rides
nrow(cyclistic_full)
[1] 5866941

#-----------------MEMBER TYPE---------------------
cyclistic_full%>%
  group_by(customers) %>% 
  count(customers)
# A tibble: 2 × 2
# Groups:   customers [2]
  customers       n
  <chr>       <int>
1 casual    2357429
2 member    3509512

cyclistic_full%>%
  group_by(customers) %>%
  summarize(total_minutes = sum(ride_length))
# A tibble: 2 × 2
  customers total_minutes
  <chr>     <drtn>       
1 casual    69028765 mins
2 member    44652598 mins

#----------------TYPE OF BIKE---------------------

#total rides by member type
cyclistic_full %>%
  group_by(customers, rideable_type) %>% 
  count(rideable_type)
# A tibble: 5 × 3
# Groups:   customers, rideable_type [5]
  customers rideable_type       n
  <chr>     <chr>           <int>
1 casual    classic_bike   906547
2 casual    docked_bike    179526
3 casual    electric_bike 1271356
4 member    classic_bike  1795439
5 member    electric_bike 1714073

#total rides 
cyclistic_full %>%
  group_by(rideable_type) %>% 
  count(rideable_type)
# A tibble: 3 × 2
# Groups:   rideable_type [3]
  rideable_type       n
  <chr>           <int>
1 classic_bike  2701986
2 docked_bike    179526
3 electric_bike 2985429

#-------------------HOUR--------------------------

#total rides by member type 
cyclistic_full %>%
  group_by(customers) %>% 
  count(hour) %>% 
  print(n = 48) #lets you view the entire tibble
# A tibble: 48 × 3
# Groups:   customers [2]
   customers hour       n
   <chr>     <chr>  <int>
 1 casual    00     46575
 2 casual    01     30208
 3 casual    02     18752
 4 casual    03     11140
 5 casual    04      7729
 6 casual    05     12822
 7 casual    06     30580
 8 casual    07     53335
 9 casual    08     71905
10 casual    09     73789
11 casual    10     94431
12 casual    11    123210
13 casual    12    146500
14 casual    13    153034
15 casual    14    163104
16 casual    15    181549
17 casual    16    201994
18 casual    17    223573
19 casual    18    199432
20 casual    19    152644
21 casual    20    112722
22 casual    21     96526
23 casual    22     86990
24 casual    23     64885
25 member    00     37274
26 member    01     22851
27 member    02     13391
28 member    03      8253
29 member    04      9302
30 member    05     33760
31 member    06     96697
32 member    07    182794
33 member    08    218164
34 member    09    152447
35 member    10    142808
36 member    11    170381
37 member    12    196878
38 member    13    195351
39 member    14    194002
40 member    15    233564
41 member    16    307641
42 member    17    367667
43 member    18    296396
44 member    19    213604
45 member    20    149960
46 member    21    117899
47 member    22     89595
48 member    23     58833

#total rides
cyclistic_full %>%
  count(hour) %>% 
  print(n = 24) #lets you view the entire tibble
# A tibble: 24 × 2
   hour       n
   <chr>  <int>
 1 00     83849
 2 01     53059
 3 02     32143
 4 03     19393
 5 04     17031
 6 05     46582
 7 06    127277
 8 07    236129
 9 08    290069
10 09    226236
11 10    237239
12 11    293591
13 12    343378
14 13    348385
15 14    357106
16 15    415113
17 16    509635
18 17    591240
19 18    495828
20 19    366248
21 20    262682
22 21    214425
23 22    176585
24 23    123718

#----------------------TIME OF DAY-----------------------

#-----morning-------
#total rides by member type 
cyclistic_full %>%
  group_by(customers) %>% 
  filter(time_of_day == "Morning") %>% 
  count(time_of_day)
# A tibble: 2 × 3
# Groups:   customers [2]
  customers time_of_day      n
  <chr>     <chr>        <int>
1 casual    Morning     447250
2 member    Morning     963291

#total rides
cyclistic_full %>%
  filter(time_of_day == "Morning") %>% 
  count(time_of_day)
# A tibble: 1 × 2
  time_of_day       n
  <chr>         <int>
1 Morning     1410541

#-----afternoon-------
#total rides by member type 
cyclistic_full %>%
  group_by(customers) %>% 
  filter(time_of_day == "Afternoon") %>% 
  count(time_of_day)
# A tibble: 2 × 3
# Groups:   customers [2]
  customers time_of_day       n
  <chr>     <chr>         <int>
1 casual    Afternoon   1069754
2 member    Afternoon   1495103

#total rides 
cyclistic_full %>%
  filter(time_of_day == "Afternoon") %>% 
  count(time_of_day)
# A tibble: 1 × 2
  time_of_day       n
  <chr>         <int>
1 Afternoon   2564857

#-----evening-------
#total rides by member type
cyclistic_full %>%
  group_by(customers) %>% 
  filter(time_of_day == "Evening") %>% 
  count(time_of_day)
# A tibble: 2 × 3
# Groups:   customers [2]
  customers time_of_day      n
  <chr>     <chr>        <int>
1 casual    Evening     713199
2 member    Evening     926287

#total rides
cyclistic_full %>%
  filter(time_of_day == "Evening") %>% 
  count(time_of_day)
# A tibble: 1 × 2
  time_of_day       n
  <chr>         <int>
1 Evening     1639486

#-----night-------
#number of rides by member type
cyclistic_full %>%
  group_by(customers) %>% 
  filter(time_of_day == "Night") %>% 
  count(time_of_day)
# A tibble: 2 × 3
# Groups:   customers [2]
  customers time_of_day      n
  <chr>     <chr>        <int>
1 casual    Night       127226
2 member    Night       124831

#number of rides 
cyclistic_full %>%
  filter(time_of_day == "Night") %>% 
  count(time_of_day)
# A tibble: 1 × 2
  time_of_day      n
  <chr>        <int>
1 Night       252057

#---all times of day----
#total rides by member type 
cyclistic_full %>%
  group_by(customers) %>% 
  count(time_of_day)
# A tibble: 8 × 3
# Groups:   customers [2]
  customers time_of_day       n
  <chr>     <chr>         <int>
1 casual    Afternoon   1069754
2 casual    Evening      713199
3 casual    Morning      447250
4 casual    Night        127226
5 member    Afternoon   1495103
6 member    Evening      926287
7 member    Morning      963291
8 member    Night        124831

#number of rides
cyclistic_full %>%
  group_by(time_of_day) %>% 
  count(time_of_day)
# A tibble: 4 × 2
# Groups:   time_of_day [4]
  time_of_day       n
  <chr>         <int>
1 Afternoon   2564857
2 Evening     1639486
3 Morning     1410541
4 Night        252057

#----------------DAY OF THE WEEK------------------

#total rides by member type
cyclistic_full %>%
  group_by(customers) %>% 
  count(day_of_week)
# A tibble: 14 × 3
# Groups:   customers [2]
   customers day_of_week      n
   <chr>     <chr>        <int>
 1 casual    Friday      337329
 2 casual    Monday      284306
 3 casual    Saturday    475426
 4 casual    Sunday      397902
 5 casual    Thursday    311720
 6 casual    Tuesday     271620
 7 casual    Wednesday   279126
 8 member    Friday      486302
 9 member    Monday      500215
10 member    Saturday    457741
11 member    Sunday      408617
12 member    Thursday    551447
13 member    Tuesday     555547
14 member    Wednesday   549643

#total rides 
cyclistic_full %>%
  count(day_of_week)
# A tibble: 7 × 2
  day_of_week      n
  <chr>        <int>
1 Friday      823631
2 Monday      784521
3 Saturday    933167
4 Sunday      806519
5 Thursday    863167
6 Tuesday     827167
7 Wednesday   828769

#----------------DAY OF THE MONTH-----------------

#total rides by member type
cyclistic_full %>%
  group_by(customers) %>% 
  count(day) %>% 
  print(n = 62) #lets you view the entire tibble
# A tibble: 62 × 3
# Groups:   customers [2]
   customers day        n
   <chr>     <chr>  <int>
 1 casual    01     72915
 2 casual    02     79544
 3 casual    03     81941
 4 casual    04     74341
 5 casual    05     81057
 6 casual    06     66111
 7 casual    07     65111
 8 casual    08     61045
 9 casual    09     92610
10 casual    10     95541
11 casual    11     73623
12 casual    12     75013
13 casual    13     79387
14 casual    14     81563
15 casual    15     67698
16 casual    16     86607
17 casual    17     78231
18 casual    18     72313
19 casual    19     78719
20 casual    20     77253
21 casual    21     82192
22 casual    22     76595
23 casual    23     93494
24 casual    24     78891
25 casual    25     58327
26 casual    26     74709
27 casual    27     65546
28 casual    28     77963
29 casual    29     82803
30 casual    30     83453
31 casual    31     42833
32 member    01    120647
33 member    02    118577
34 member    03    108047
35 member    04    109642
36 member    05    112161
37 member    06    110057
38 member    07    115396
39 member    08    112676
40 member    09    129515
41 member    10    133329
42 member    11    114639
43 member    12    118482
44 member    13    119922
45 member    14    122452
46 member    15    109665
47 member    16    119214
48 member    17    112189
49 member    18    105434
50 member    19    114972
51 member    20    116717
52 member    21    127530
53 member    22    111767
54 member    23    122863
55 member    24    110704
56 member    25     93036
57 member    26    113225
58 member    27    107843
59 member    28    120977
60 member    29    111268
61 member    30    101984
62 member    31     64582
#total rides
cyclistic_full %>%
  count(day) %>% 
  print(n = 31) #lets you view the entire tibble
# A tibble: 31 × 2
   day        n
   <chr>  <int>
 1 01    193562
 2 02    198121
 3 03    189988
 4 04    183983
 5 05    193218
 6 06    176168
 7 07    180507
 8 08    173721
 9 09    222125
10 10    228870
11 11    188262
12 12    193495
13 13    199309
14 14    204015
15 15    177363
16 16    205821
17 17    190420
18 18    177747
19 19    193691
20 20    193970
21 21    209722
22 22    188362
23 23    216357
24 24    189595
25 25    151363
26 26    187934
27 27    173389
28 28    198940
29 29    194071
30 30    185437
31 31    107415

#---------------------MONTH-----------------------

#total rides by member type 
cyclistic_full %>%
  group_by(customers) %>% 
  count(month) %>% 
  print(n = 24) #lets you view the entire tibble
# A tibble: 24 × 3
# Groups:   customers [2]
   customers month      n
   <chr>     <chr>  <int>
 1 casual    01     39309
 2 casual    02     63381
 3 casual    03     88936
 4 casual    04    124949
 5 casual    05    277229
 6 casual    06    364911
 7 casual    07    401248
 8 casual    08    354439
 9 casual    09    293181
10 casual    10    206253
11 casual    11     99376
12 casual    12     44217
13 member    01    147181
14 member    02    237237
15 member    03    191997
16 member    04    241700
17 member    05    350155
18 member    06    395183
19 member    07    411957
20 member    08    421312
21 member    09    399451
22 member    10    344836
23 member    11    233804
24 member    12    134699

#total rides
cyclistic_full %>%
  count(month) 
# A tibble: 12 × 2
   month      n
   <chr>  <int>
 1 01    186490
 2 02    300618
 3 03    280933
 4 04    366649
 5 05    627384
 6 06    760094
 7 07    813205
 8 08    775751
 9 09    692632
10 10    551089
11 11    333180
12 12    178916

#--------------------SEASON-----------------------

#-----spring-------

#total rides by member type 
cyclistic_full %>%
  group_by(customers) %>% 
  filter(season == "Spring") %>% 
  count(season)
# A tibble: 2 × 3
# Groups:   customers [2]
  customers season      n
  <chr>     <chr>   <int>
1 casual    Spring 491114
2 member    Spring 783852

#total rides
cyclistic_full %>%
  filter(season == "Spring") %>% 
  count(season)
# A tibble: 1 × 2
  season       n
  <chr>    <int>
1 Spring 1274966

#-----summer-------

#total rides by member type
cyclistic_full %>%
  group_by(customers) %>% 
  filter(season == "Summer") %>% 
  count(season)
# A tibble: 2 × 3
# Groups:   customers [2]
  customers season       n
  <chr>     <chr>    <int>
1 casual    Summer 1120598
2 member    Summer 1228452

#total rides
cyclistic_full %>%
  filter(season == "Summer") %>% 
  count(season)
# A tibble: 1 × 2
  season       n
  <chr>    <int>
1 Summer 2349050

#-----fall-------

#total rides by member type
cyclistic_full %>%
  group_by(customers) %>% 
  filter(season == "Fall") %>% 
  count(season)
# A tibble: 2 × 3
# Groups:   customers [2]
  customers season      n
  <chr>     <chr>   <int>
1 casual    Fall   598810
2 member    Fall   978091

#total rides
cyclistic_full %>%
  filter(season == "Fall") %>% 
  count(season)
# A tibble: 1 × 2
  season       n
  <chr>    <int>
1 Fall   1576901

#-----winter-------

#total rides by member type
cyclistic_full %>%
  group_by(customers) %>% 
  filter(season == "Winter") %>% 
  count(season)
# A tibble: 2 × 3
# Groups:   customers [2]
  customers season      n
  <chr>     <chr>   <int>
1 casual    Winter 146907
2 member    Winter 519117

#total rides 
cyclistic_full %>%
  filter(season == "Winter") %>% 
  count(season)
# A tibble: 1 × 2
  season      n
  <chr>   <int>
1 Winter 666024

#-----all seasons-------

#total rides by member type
cyclistic_full %>%
  group_by(season, customers) %>% 
  count(season)
# A tibble: 8 × 3
# Groups:   season, customers [8]
  season customers       n
  <chr>  <chr>       <int>
1 Fall   casual     598810
2 Fall   member     978091
3 Spring casual     491114
4 Spring member     783852
5 Summer casual    1120598
6 Summer member    1228452
7 Winter casual     146907
8 Winter member     519117

#total rides
cyclistic_full %>%
  group_by(season) %>% 
  count(season)
# A tibble: 4 × 2
# Groups:   season [4]
  season       n
  <chr>    <int>
1 Fall   1576901
2 Spring 1274966
3 Summer 2349050
4 Winter  666024

#------------------------------------AVERAGE RIDE LENGTH-----------------------------------

#average of ride_length
cyclistic_avgRide <- mean(cyclistic_full$ride_length)
print(cyclistic_avgRide)
Time difference of 19.3766 mins

#------------------MEMBER TYPE--------------------

#average ride_length
cyclistic_full %>% group_by( customers) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 2 × 2
  customers time         
  <chr>     <drtn>       
1 casual    29.28138 mins
2 member    12.72331 mins

#----------------TYPE OF BIKE---------------------

#total rides by member type 
cyclistic_full %>% group_by(customers, rideable_type) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 5 × 3
# Groups:   customers [2]
  customers rideable_type time          
  <chr>     <chr>         <drtn>        
1 casual    classic_bike   28.81320 mins
2 casual    docked_bike   124.01386 mins
3 casual    electric_bike  16.23820 mins
4 member    classic_bike   13.84959 mins
5 member    electric_bike  11.54356 mins

#average ride_length
cyclistic_full %>% group_by(rideable_type) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 3 × 2
  rideable_type time          
  <chr>         <drtn>        
1 classic_bike   18.87005 mins
2 docked_bike   124.01386 mins
3 electric_bike  13.54279 mins

#-----------------------HOUR-------------------------

#average ride_length by member type
cyclistic_full %>% group_by(hour, customers) %>% 
  summarise_at(vars(ride_length),
               list(time = mean)) %>% 
  print(n=48) 
# A tibble: 48 × 3
# Groups:   hour [24]
   hour  customers time         
   <chr> <chr>     <drtn>       
 1 00    casual    31.51090 mins
 2 00    member    12.95066 mins
 3 01    casual    37.00142 mins
 4 01    member    13.49915 mins
 5 02    casual    40.86817 mins
 6 02    member    12.95363 mins
 7 03    casual    42.44623 mins
 8 03    member    13.16309 mins
 9 04    casual    38.42489 mins
10 04    member    13.23533 mins
11 05    casual    27.86274 mins
12 05    member    10.42390 mins
13 06    casual    23.45402 mins
14 06    member    11.02476 mins
15 07    casual    19.65692 mins
16 07    member    11.61366 mins
17 08    casual    20.16415 mins
18 08    member    11.49492 mins
19 09    casual    25.78635 mins
20 09    member    11.60916 mins
21 10    casual    32.09934 mins
22 10    member    12.58651 mins
23 11    casual    32.38758 mins
24 11    member    12.92675 mins
25 12    casual    31.29242 mins
26 12    member    12.50971 mins
27 13    casual    31.44835 mins
28 13    member    12.55967 mins
29 14    casual    31.58502 mins
30 14    member    13.01870 mins
31 15    casual    31.61665 mins
32 15    member    13.02276 mins
33 16    casual    28.92381 mins
34 16    member    13.27812 mins
35 17    casual    26.24077 mins
36 17    member    13.58325 mins
37 18    casual    27.67329 mins
38 18    member    13.30653 mins
39 19    casual    29.41899 mins
40 19    member    13.10091 mins
41 20    casual    28.84886 mins
42 20    member    12.88740 mins
43 21    casual    28.49737 mins
44 21    member    12.75137 mins
45 22    casual    26.68857 mins
46 22    member    12.67620 mins
47 23    casual    32.03193 mins
48 23    member    12.93473 mins

#average ride_length
cyclistic_full%>% group_by(hour) %>% 
  summarise_at(vars(ride_length),
               list(time = mean)) %>% 
  print(n=24) #lets you view entire tibble
# A tibble: 24 × 2
   hour  time         
   <chr> <drtn>       
 1 00    23.26018 mins
 2 01    26.87966 mins
 3 02    29.23878 mins
 4 03    29.98432 mins
 5 04    24.66684 mins
 6 05    15.22406 mins
 7 06    14.01105 mins
 8 07    13.43041 mins
 9 08    13.64393 mins
10 09    16.23318 mins
11 10    20.35343 mins
12 11    21.09379 mins
13 12    20.52323 mins
14 13    20.85684 mins
15 14    21.49865 mins
16 15    21.15477 mins
17 16    19.47929 mins
18 17    18.36960 mins
19 18    19.08513 mins
20 19    19.90192 mins
21 20    19.73677 mins
22 21    19.83962 mins
23 22    19.57903 mins
24 23    22.95043 mins

#--------------------TIME OF DAY---------------------

#----morning----

#average ride length by member type
cyclistic_full %>% 
  group_by(customers) %>% 
  filter(time_of_day == "Morning") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 2 × 2
  customers time         
  <chr>     <drtn>       
1 casual    27.14349 mins
2 member    11.90342 mins

#average ride length
cyclistic_full %>% 
  filter(time_of_day == "Morning") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 1 × 1
  time         
  <drtn>       
1 16.73569 mins

#----afternoon----

#average ride length by member type
cyclistic_full %>% 
  group_by(customers) %>% 
  filter(time_of_day == "Afternoon") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 2 × 2
  customers time         
  <chr>     <drtn>       
1 casual    29.91135 mins
2 member    13.08454 mins

#average ride length
cyclistic_full %>% 
  filter(time_of_day == "Afternoon") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 1 × 1
  time         
  <drtn>       
1 20.10269 mins

#----evening----

#average ride length by member type
cyclistic_full %>% 
  group_by(customers) %>% 
  filter(time_of_day == "Evening") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 2 × 2
  customers time         
  <chr>     <drtn>       
1 casual    28.62068 mins
2 member    13.03601 mins

#average ride length
cyclistic_full %>% 
  filter(time_of_day == "Evening") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 1 × 1
  time         
  <drtn>       
1 19.81556 mins

#----night----

#average ride length by member type 
cyclistic_full %>% 
  group_by(customers) %>% 
  filter(time_of_day == "Night") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 2 × 2
  customers time         
  <chr>     <drtn>       
1 casual    35.20359 mins
2 member    12.40329 mins

#average ride length
cyclistic_full %>% 
  filter(time_of_day == "Night") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 1 × 1
  time         
  <drtn>       
1 23.91176 mins

#---all times of day---

#average ride length by member type
cyclistic_full %>% 
  group_by(time_of_day, customers) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 8 × 3
# Groups:   time_of_day [4]
  time_of_day customers time         
  <chr>       <chr>     <drtn>       
1 Afternoon   casual    29.91135 mins
2 Afternoon   member    13.08454 mins
3 Evening     casual    28.62068 mins
4 Evening     member    13.03601 mins
5 Morning     casual    27.14349 mins
6 Morning     member    11.90342 mins
7 Night       casual    35.20359 mins
8 Night       member    12.40329 mins

#average ride length
cyclistic_full %>% 
  group_by(time_of_day) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 4 × 2
  time_of_day time         
  <chr>       <drtn>       
1 Afternoon   20.10269 mins
2 Evening     19.81556 mins
3 Morning     16.73569 mins
4 Night       23.91176 mins

#-------------------DAY OF THE WEEK-----------------

#average ride_length by member type
cyclistic_full %>% group_by(customers, day_of_week) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 14 × 3
# Groups:   customers [2]
   customers day_of_week time         
   <chr>     <chr>       <drtn>       
 1 casual    Friday      28.18831 mins
 2 casual    Monday      29.19398 mins
 3 casual    Saturday    32.93835 mins
 4 casual    Sunday      34.32512 mins
 5 casual    Thursday    25.60325 mins
 6 casual    Tuesday     25.87645 mins
 7 casual    Wednesday   24.69358 mins
 8 member    Friday      12.55662 mins
 9 member    Monday      12.28924 mins
10 member    Saturday    14.20041 mins
11 member    Sunday      14.08866 mins
12 member    Thursday    12.30039 mins
13 member    Tuesday     12.07252 mins
14 member    Wednesday   12.10274 mins

#average ride_length 
cyclistic_full %>% group_by(day_of_week) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 7 × 2
  day_of_week time         
  <chr>       <drtn>       
1 Friday      18.95879 mins
2 Monday      18.41542 mins
3 Saturday    23.74694 mins
4 Sunday      24.07246 mins
5 Thursday    17.10452 mins
6 Tuesday     16.60537 mins
7 Wednesday   16.34328 mins

#-----------------DAY OF THE MONTH------------------

#average ride_length by member type
cyclistic_full %>% group_by(day, customers) %>% 
  summarise_at(vars(ride_length),
               list(time = mean)) %>% 
  print(n=62)  #lets you view entire tibble
# A tibble: 62 × 3
# Groups:   day [31]
   day   customers time         
   <chr> <chr>     <drtn>       
 1 01    casual    26.41814 mins
 2 01    member    12.41464 mins
 3 02    casual    29.84927 mins
 4 02    member    12.79527 mins
 5 03    casual    30.86889 mins
 6 03    member    12.72003 mins
 7 04    casual    29.09848 mins
 8 04    member    12.78097 mins
 9 05    casual    31.54320 mins
10 05    member    12.89726 mins
11 06    casual    28.45203 mins
12 06    member    12.20568 mins
13 07    casual    26.77955 mins
14 07    member    12.35861 mins
15 08    casual    26.99687 mins
16 08    member    11.99079 mins
17 09    casual    35.31200 mins
18 09    member    13.17157 mins
19 10    casual    31.74384 mins
20 10    member    13.23195 mins
21 11    casual    31.87348 mins
22 11    member    12.69486 mins
23 12    casual    28.66730 mins
24 12    member    12.60736 mins
25 13    casual    30.26444 mins
26 13    member    12.69361 mins
27 14    casual    31.54070 mins
28 14    member    12.94704 mins
29 15    casual    30.78800 mins
30 15    member    12.37842 mins
31 16    casual    29.03862 mins
32 16    member    13.13580 mins
33 17    casual    34.75924 mins
34 17    member    12.69067 mins
35 18    casual    27.99329 mins
36 18    member    12.69172 mins
37 19    casual    30.82751 mins
38 19    member    12.87226 mins
39 20    casual    28.11958 mins
40 20    member    12.63388 mins
41 21    casual    29.09710 mins
42 21    member    12.90381 mins
43 22    casual    27.25683 mins
44 22    member    12.83121 mins
45 23    casual    29.67828 mins
46 23    member    13.21546 mins
47 24    casual    27.03652 mins
48 24    member    12.85656 mins
49 25    casual    27.54846 mins
50 25    member    12.36352 mins
51 26    casual    27.74802 mins
52 26    member    12.72033 mins
53 27    casual    24.90202 mins
54 27    member    12.34301 mins
55 28    casual    27.35713 mins
56 28    member    12.29139 mins
57 29    casual    27.23822 mins
58 29    member    12.72834 mins
59 30    casual    28.31759 mins
60 30    member    13.17336 mins
61 31    casual    24.24553 mins
62 31    member    12.89948 mins

#average ride_length
cyclistic_full %>% group_by(day) %>% 
  summarise_at(vars(ride_length),
               list(time = mean)) %>% 
  print(n=31)  #lets you view entire tibble
# A tibble: 31 × 2
   day   time         
   <chr> <drtn>       
 1 01    17.68977 mins
 2 02    19.64231 mins
 3 03    20.54756 mins
 4 04    19.37430 mins
 5 05    20.71943 mins
 6 06    18.30248 mins
 7 07    17.56041 mins
 8 08    17.26388 mins
 9 09    22.40252 mins
10 10    20.95967 mins
11 11    20.19498 mins
12 12    18.83338 mins
13 13    19.69227 mins
14 14    20.38058 mins
15 15    19.40520 mins
16 16    19.82752 mins
17 17    21.75719 mins
18 18    18.91688 mins
19 19    20.16955 mins
20 20    18.80141 mins
21 21    19.25011 mins
22 22    18.69721 mins
23 23    20.32951 mins
24 24    18.75688 mins
25 25    18.21496 mins
26 26    18.69425 mins
27 27    17.09067 mins
28 28    18.19554 mins
29 29    18.91917 mins
30 30    19.98878 mins
31 31    17.42385 mins

#---------------------MONTH--------------------------

#average ride_length by member type
cyclistic_full %>% group_by(month, customers) %>% 
  summarise_at(vars(ride_length),
               list(time = mean)) %>% 
  print(n=24)  #lets you view entire tibble
# A tibble: 24 × 3
# Groups:   month [12]
   month customers time         
   <chr> <chr>     <drtn>       
 1 01    casual    23.32445 mins
 2 01    member    10.58097 mins
 3 02    casual    24.76198 mins
 4 02    member    11.18707 mins
 5 03    casual    32.97057 mins
 6 03    member    12.09315 mins
 7 04    casual    29.88082 mins
 8 04    member    11.64018 mins
 9 05    casual    31.22579 mins
10 05    member    13.53117 mins
11 06    casual    32.46393 mins
12 06    member    14.17488 mins
13 07    casual    29.62815 mins
14 07    member    13.90099 mins
15 08    casual    29.68041 mins
16 08    member    13.56566 mins
17 09    casual    28.32100 mins
18 09    member    13.14496 mins
19 10    casual    26.74021 mins
20 10    member    12.12675 mins
21 11    casual    21.59588 mins
22 11    member    11.28294 mins
23 12    casual    22.63396 mins
24 12    member    10.79330 mins

#average ride_length
cyclistic_full %>% group_by(month) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 12 × 2
   month time         
   <chr> <drtn>       
 1 01    13.26709 mins
 2 02    14.04914 mins
 3 03    18.70239 mins
 4 04    17.85634 mins
 5 05    21.35008 mins
 6 06    22.95521 mins
 7 07    21.66101 mins
 8 08    20.92846 mins
 9 09    19.56876 mins
10 10    17.59605 mins
11 11    14.35893 mins
12 12    13.71958 mins

#----------------------SEASON-------------------------

#-----spring------

#average ride length by member type
cyclistic_full %>% 
  group_by(customers) %>% 
  filter(season == "Spring") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 2 × 2
  customers time         
  <chr>     <drtn>       
1 casual    31.19957 mins
2 member    12.59585 mins

#average ride length
cyclistic_full %>% 
  filter(season == "Spring") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 1 × 1
  time         
  <drtn>       
1 19.76196 mins

#-----summer------

#average ride length by member type for summer 
cyclistic_full %>% 
  group_by(customers) %>% 
  filter(season == "Summer") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 2 × 2
  customers time         
  <chr>     <drtn>       
1 casual    30.56812 mins
2 member    13.87409 mins

#average ride length for summer 
cyclistic_full %>% 
  filter(season == "Summer") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 1 × 1
  time         
  <drtn>       
1 21.83786 mins

#-----fall------

#average ride length by member type
cyclistic_full %>% 
  group_by(customers) %>% 
  filter(season == "Fall") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 2 × 2
  customers time         
  <chr>     <drtn>       
1 casual    26.66044 mins
2 member    12.34088 mins

#average ride length
cyclistic_full %>% 
  filter(season == "Fall") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 1 × 1
  time         
  <drtn>       
1 17.77857 mins

#-----winter-----

#average ride length by member type
cyclistic_full %>% 
  group_by(customers) %>% 
  filter(season == "Winter") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 2 × 2
  customers time         
  <chr>     <drtn>       
1 casual    23.73683 mins
2 member    10.91305 mins

#average ride length
cyclistic_full %>% 
  filter(season == "Winter") %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 1 × 1
  time         
  <drtn>       
1 13.74163 mins

#----all seasons----

#average ride length by member type
cyclistic_full %>% 
  group_by(season, customers) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 8 × 3
# Groups:   season [4]
  season customers time         
  <chr>  <chr>     <drtn>       
1 Fall   casual    26.66044 mins
2 Fall   member    12.34088 mins
3 Spring casual    31.19957 mins
4 Spring member    12.59585 mins
5 Summer casual    30.56812 mins
6 Summer member    13.87409 mins
7 Winter casual    23.73683 mins
8 Winter member    10.91305 mins

#average ride length 
cyclistic_full %>% 
  group_by(season) %>% 
  summarise_at(vars(ride_length),
               list(time = mean))
# A tibble: 4 × 2
  season time         
  <chr>  <drtn>       
1 Fall   17.77857 mins
2 Spring 19.76196 mins
3 Summer 21.83786 mins
4 Winter 13.74163 mins

#------------------------------------downloading file for tableau-----------------------------------
#created a new dataframe to use in Tableau
cyclistic_tableau <- cyclistic_full

#clean the data
cyclistic_tableau <- cyclistic_tableau %>%  #remove columns not needed: time, started_at, ended_at
  select(-c(time, started_at, ended_at))

#download the new data as a .csv file
fwrite(cyclistic_tableau,"cyclistic_full.csv")
